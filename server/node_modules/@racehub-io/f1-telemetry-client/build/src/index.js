"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const dgram = __importStar(require("dgram"));
const events_1 = require("events");
const constants = __importStar(require("./constants"));
exports.constants = constants;
const constantsTypes = __importStar(require("./constants/types"));
exports.constantsTypes = constantsTypes;
const packets_1 = require("./parsers/packets");
const packetTypes = __importStar(require("./parsers/packets/types"));
exports.packetTypes = packetTypes;
const DEFAULT_PORT = 20777;
exports.DEFAULT_PORT = DEFAULT_PORT;
const FORWARD_ADDRESSES = undefined;
exports.FORWARD_ADDRESSES = FORWARD_ADDRESSES;
const BIGINT_ENABLED = true;
exports.BIGINT_ENABLED = BIGINT_ENABLED;
const ADDRESS = 'localhost';
/**
 *
 */
class F1TelemetryClient extends events_1.EventEmitter {
    constructor(opts = {}) {
        super();
        const { port = DEFAULT_PORT, bigintEnabled = BIGINT_ENABLED, forwardAddresses = FORWARD_ADDRESSES, } = opts;
        this.port = port;
        this.bigintEnabled = bigintEnabled;
        this.forwardAddresses = forwardAddresses;
        this.socket = dgram.createSocket('udp4');
    }
    /**
     *
     * @param {Buffer} message
     */
    static parseBufferMessage(message, bigintEnabled = false) {
        const { m_packetFormat, m_packetId } = F1TelemetryClient.parsePacketHeader(message, bigintEnabled);
        const parser = F1TelemetryClient.getParserByPacketId(m_packetId);
        if (!parser) {
            return;
        }
        const packetData = new parser(message, m_packetFormat, bigintEnabled);
        const packetID = Object.keys(constants.PACKETS)[m_packetId];
        // emit parsed message
        return { packetData, packetID };
    }
    /**
     *
     * @param {Buffer} buffer
     * @param {Boolean} bigIntEnabled
     */
    static parsePacketHeader(buffer, bigintEnabled
    // tslint:disable-next-line:no-any
    ) {
        const packetFormatParser = new packets_1.PacketFormatParser();
        const { m_packetFormat } = packetFormatParser.fromBuffer(buffer);
        const packetHeaderParser = new packets_1.PacketHeaderParser(m_packetFormat, bigintEnabled);
        return packetHeaderParser.fromBuffer(buffer);
    }
    /**
     *
     * @param {Number} packetFormat
     * @param {Number} packetId
     */
    static getPacketSize(packetFormat, packetId) {
        const { PACKET_SIZES } = constants;
        const packetValues = Object.values(PACKET_SIZES);
        return packetValues[packetId][packetFormat];
    }
    /**
     *
     * @param {Number} packetId
     */
    static getParserByPacketId(packetId) {
        const { PACKETS } = constants;
        const packetKeys = Object.keys(PACKETS);
        const packetType = packetKeys[packetId];
        switch (packetType) {
            case PACKETS.session:
                return packets_1.PacketSessionDataParser;
            case PACKETS.motion:
                return packets_1.PacketMotionDataParser;
            case PACKETS.lapData:
                return packets_1.PacketLapDataParser;
            case PACKETS.event:
                return packets_1.PacketEventDataParser;
            case PACKETS.participants:
                return packets_1.PacketParticipantsDataParser;
            case PACKETS.carSetups:
                return packets_1.PacketCarSetupDataParser;
            case PACKETS.carTelemetry:
                return packets_1.PacketCarTelemetryDataParser;
            case PACKETS.carStatus:
                return packets_1.PacketCarStatusDataParser;
            case PACKETS.finalClassification:
                return packets_1.PacketFinalClassificationDataParser;
            case PACKETS.lobbyInfo:
                return packets_1.PacketLobbyInfoDataParser;
            case PACKETS.carDamage:
                return packets_1.PacketCarDamageDataParser;
            case PACKETS.sessionHistory:
                return packets_1.PacketSessionHistoryDataParser;
            default:
                return null;
        }
    }
    /**
     *
     * @param {Buffer} message
     */
    handleMessage(message) {
        if (this.forwardAddresses) {
            // bridge message
            this.bridgeMessage(message);
        }
        const parsedMessage = F1TelemetryClient.parseBufferMessage(message, this.bigintEnabled);
        if (!parsedMessage || !parsedMessage.packetData) {
            return;
        }
        // emit parsed message
        this.emit(parsedMessage.packetID, parsedMessage.packetData.data);
    }
    /**
     *
     * @param {Buffer} message
     */
    bridgeMessage(message) {
        if (!this.socket) {
            throw new Error('Socket is not initialized');
        }
        if (!this.forwardAddresses) {
            throw new Error('No ports to bridge over');
        }
        for (const address of this.forwardAddresses) {
            this.socket.send(message, 0, message.length, address.port, address.ip || '0.0.0.0');
        }
    }
    /**
     * Method to start listening for packets
     */
    start() {
        if (!this.socket) {
            return;
        }
        this.socket.on('listening', () => {
            if (!this.socket) {
                return;
            }
            const address = this.socket.address();
            console.log(`UDP Client listening on ${address.address}:${address.port} 🏎`);
            this.socket.setBroadcast(true);
        });
        this.socket.on('message', (m) => this.handleMessage(m));
        this.socket.bind({
            port: this.port,
            exclusive: false,
        });
    }
    /**
     * Method to close the client
     */
    stop() {
        if (!this.socket) {
            return;
        }
        return this.socket.close(() => {
            console.log(`UDP Client closed 🏁`);
            this.socket = undefined;
        });
    }
}
exports.F1TelemetryClient = F1TelemetryClient;
//# sourceMappingURL=index.js.map