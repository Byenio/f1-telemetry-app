"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const binary_parser_1 = require("binary-parser");
const constants_1 = require("../../constants");
const F1Parser_1 = require("../F1Parser");
const PacketHeaderParser_1 = require("./PacketHeaderParser");
class GenericEventParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint8('vehicleIdx');
    }
}
exports.GenericEventParser = GenericEventParser;
class FastestLapParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint8('vehicleIdx').floatle('lapTime');
    }
}
exports.FastestLapParser = FastestLapParser;
class FlashbackParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little')
            .uint32le('flashbackFrameIdentifier')
            .floatle('flashbackSessionTime');
    }
}
exports.FlashbackParser = FlashbackParser;
class StartLightsParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint8('numLights');
    }
}
exports.StartLightsParser = StartLightsParser;
class ButtonsParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint32le('m_buttonStatus');
    }
}
exports.ButtonsParser = ButtonsParser;
class SpeedTrapParser extends F1Parser_1.F1Parser {
    constructor(packetFormat) {
        super();
        this.endianess('little').uint8('vehicleIdx').floatle('speed');
        if (packetFormat === 2021) {
            this.uint8('overallFastestInSession').uint8('driverFastestInSession');
        }
        if (packetFormat === 2022) {
            this.uint8('isOverallFastestInSession')
                .uint8('isDriverFastestInSession')
                .uint8('fastestVehicleIdxInSession')
                .floatle('fastestSpeedInSession');
        }
    }
}
exports.SpeedTrapParser = SpeedTrapParser;
class PenaltyParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little')
            .uint8('penaltyType')
            .uint8('infringementType')
            .uint8('vehicleIdx')
            .uint8('otherVehicleIdx')
            .uint8('time')
            .uint8('lapNum')
            .uint8('placesGained');
    }
}
exports.PenaltyParser = PenaltyParser;
class PacketEventDataParser extends F1Parser_1.F1Parser {
    constructor(buffer, packetFormat, bigintEnabled) {
        super();
        this.unpack2019Format = (buffer, packetFormat, bigintEnabled) => {
            const eventStringCode = this.getEventStringCode(buffer, packetFormat, bigintEnabled);
            if (eventStringCode === constants_1.EVENT_CODES.FastestLap) {
                this.uint8('vehicleIdx').floatle('lapTime');
            }
            else if (eventStringCode === constants_1.EVENT_CODES.Retirement ||
                eventStringCode === constants_1.EVENT_CODES.TeammateInPits ||
                eventStringCode === constants_1.EVENT_CODES.RaceWinner) {
                this.uint8('vehicleIdx');
            }
        };
        this.unpack2020Format = (buffer, packetFormat, bigintEnabled) => {
            const eventStringCode = this.getEventStringCode(buffer, packetFormat, bigintEnabled);
            if (eventStringCode === constants_1.EVENT_CODES.FastestLap) {
                this.nest('m_eventDetails', { type: new FastestLapParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.Retirement ||
                eventStringCode === constants_1.EVENT_CODES.TeammateInPits ||
                eventStringCode === constants_1.EVENT_CODES.RaceWinner) {
                this.nest('m_eventDetails', { type: new GenericEventParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.SpeedTrapTriggered) {
                this.nest('m_eventDetails', { type: new SpeedTrapParser(packetFormat) });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.PenaltyIssued) {
                this.nest('m_eventDetails', { type: new PenaltyParser() });
            }
        };
        this.unpack2021Format = (buffer, packetFormat, bigintEnabled) => {
            const eventStringCode = this.getEventStringCode(buffer, packetFormat, bigintEnabled);
            if (eventStringCode === constants_1.EVENT_CODES.FastestLap) {
                this.nest('m_eventDetails', { type: new FastestLapParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.SpeedTrapTriggered) {
                this.nest('m_eventDetails', { type: new SpeedTrapParser(packetFormat) });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.PenaltyIssued) {
                this.nest('m_eventDetails', { type: new PenaltyParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.Flashback) {
                this.nest('m_eventDetails', { type: new FlashbackParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.StartLights) {
                this.nest('m_eventDetails', { type: new StartLightsParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.ButtonStatus) {
                this.nest('m_eventDetails', { type: new ButtonsParser() });
            }
            else {
                this.nest('m_eventDetails', { type: new GenericEventParser() });
            }
        };
        this.unpack2022Format = (buffer, packetFormat, bigintEnabled) => {
            const eventStringCode = this.getEventStringCode(buffer, packetFormat, bigintEnabled);
            if (eventStringCode === constants_1.EVENT_CODES.FastestLap) {
                this.nest('m_eventDetails', { type: new FastestLapParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.SpeedTrapTriggered) {
                this.nest('m_eventDetails', { type: new SpeedTrapParser(packetFormat) });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.PenaltyIssued) {
                this.nest('m_eventDetails', { type: new PenaltyParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.Flashback) {
                this.nest('m_eventDetails', { type: new FlashbackParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.StartLights) {
                this.nest('m_eventDetails', { type: new StartLightsParser() });
            }
            else if (eventStringCode === constants_1.EVENT_CODES.ButtonStatus) {
                this.nest('m_eventDetails', { type: new ButtonsParser() });
            }
            else {
                this.nest('m_eventDetails', { type: new GenericEventParser() });
            }
        };
        this.getEventStringCode = (buffer, packetFormat, bigintEnabled) => {
            const headerParser = new binary_parser_1.Parser()
                .endianess('little')
                .nest('m_header', {
                type: new PacketHeaderParser_1.PacketHeaderParser(packetFormat, bigintEnabled),
            })
                .string('m_eventStringCode', { length: 4 });
            const { m_eventStringCode } = headerParser.parse(buffer);
            return m_eventStringCode;
        };
        this.endianess('little').nest('m_header', {
            type: new PacketHeaderParser_1.PacketHeaderParser(packetFormat, bigintEnabled),
        });
        this.string('m_eventStringCode', { length: 4 });
        if (packetFormat === 2019) {
            this.unpack2019Format(buffer, packetFormat, bigintEnabled);
        }
        if (packetFormat === 2020) {
            this.unpack2020Format(buffer, packetFormat, bigintEnabled);
        }
        if (packetFormat === 2021) {
            this.unpack2021Format(buffer, packetFormat, bigintEnabled);
        }
        if (packetFormat === 2022) {
            this.unpack2022Format(buffer, packetFormat, bigintEnabled);
        }
        this.data = this.fromBuffer(buffer);
    }
}
exports.PacketEventDataParser = PacketEventDataParser;
//# sourceMappingURL=PacketEventDataParser.js.map